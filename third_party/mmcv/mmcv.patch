diff --git a/mmcv/onnx/onnx_utils/symbolic_helper.py b/mmcv/onnx/onnx_utils/symbolic_helper.py
index cc9e96f8..0b6c4824 100644
--- a/mmcv/onnx/onnx_utils/symbolic_helper.py
+++ b/mmcv/onnx/onnx_utils/symbolic_helper.py
@@ -194,7 +194,9 @@ def _slice_helper(g,
                   dynamic_slice=False):
     # TODO(ruobing): add support for opset<10
     from torch.onnx.symbolic_opset10 import _slice
-    return _slice(g, input, axes, starts, ends, steps, dynamic_slice)
+    # To accomodate for change in _slice api
+    # definition from 23.10 PyTorch (2.1.0)
+    return _slice(g, input, axes, starts, ends, steps)
 
 
 def _unsqueeze_helper(g, input, dim):
diff --git a/setup.py b/setup.py
index 5b357aa3..fc33ab90 100644
--- a/setup.py
+++ b/setup.py
@@ -216,8 +216,8 @@ def get_extensions():
         include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common/cuda'))
         cuda_args = os.getenv('MMCV_CUDA_ARGS')
         extra_compile_args = {
-            'nvcc': [cuda_args, '-std=c++14'] if cuda_args else ['-std=c++14'],
-            'cxx': ['-std=c++14'],
+            'nvcc': [cuda_args, '-std=c++17'] if cuda_args else ['-std=c++17'],
+            'cxx': ['-std=c++17'],
         }
         if torch.cuda.is_available() or os.getenv('FORCE_CUDA', '0') == '1':
             define_macros += [('MMCV_WITH_CUDA', None)]
@@ -259,14 +259,14 @@ def get_extensions():
         extra_compile_args = {'cxx': []}
 
         # Since the PR (https://github.com/open-mmlab/mmcv/pull/1463) uses
-        # c++14 features, the argument ['std=c++14'] must be added here.
+        # c++14 features, the argument ['std=c++17'] must be added here.
         # However, in the windows environment, some standard libraries
         # will depend on c++17 or higher. In fact, for the windows
         # environment, the compiler will choose the appropriate compiler
         # to compile those cpp files, so there is no need to add the
         # argument
         if platform.system() != 'Windows':
-            extra_compile_args['cxx'] = ['-std=c++14']
+            extra_compile_args['cxx'] = ['-std=c++17']
 
         include_dirs = []
 
@@ -357,14 +357,14 @@ def get_extensions():
             include_dirs.append(os.path.abspath('./mmcv/ops/csrc/common'))
 
         # Since the PR (https://github.com/open-mmlab/mmcv/pull/1463) uses
-        # c++14 features, the argument ['std=c++14'] must be added here.
+        # c++14 features, the argument ['std=c++17'] must be added here.
         # However, in the windows environment, some standard libraries
         # will depend on c++17 or higher. In fact, for the windows
         # environment, the compiler will choose the appropriate compiler
         # to compile those cpp files, so there is no need to add the
         # argument
         if 'nvcc' in extra_compile_args and platform.system() != 'Windows':
-            extra_compile_args['nvcc'] += ['-std=c++14']
+            extra_compile_args['nvcc'] += ['-std=c++17']
 
         ext_ops = extension(
             name=ext_name,
